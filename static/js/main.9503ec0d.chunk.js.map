{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","App","useAuthState","user","theme","sx","maxWidth","mx","px","py","SignOut","ChatRoom","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","currentUser","signOut","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","displayName","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","mb","value","onChange","target","placeholder","variant","mr","type","disabled","props","messageClass","className","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAWKA,IAASC,KAAKC,QACjBF,IAASG,cAAc,CACrBC,OAAQ,0CACRC,WAAY,6BACZC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGnB,IAAMC,EAAOX,IAASW,OAChBC,EAAYZ,IAASY,YAyBZC,MAvBf,WAAgB,IAAD,EACEC,YAAaH,GAArBI,EADM,oBAGb,OACE,cAAC,IAAD,CAAeC,MAAOA,IAAtB,SACE,sBACEC,GAAI,CACFC,SAAU,IACVC,GAAI,OACJC,GAAI,EACJC,GAAI,GALR,UAQE,mCACE,sGACA,cAACC,EAAD,OAEF,kCAAUP,EAAO,cAACQ,EAAD,IAAe,cAACC,EAAD,YAQxC,SAASA,IAKP,OAAO,wBAAQC,QAJU,WACvB,IAAMC,EAAW,IAAI1B,IAASW,KAAKgB,mBACnChB,EAAKiB,gBAAgBF,IAEhB,iCAGT,SAASJ,IACP,OACEX,EAAKkB,aAAe,wBAAQJ,QAAS,kBAAMd,EAAKmB,WAA5B,sBAIxB,SAASP,IACP,IAAMQ,EAAQC,mBACRC,EAAcrB,EAAUsB,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,KAHnC,EAKCC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EALW,sBAOgBC,mBAAS,IAPzB,mBAOXC,EAPW,KAOAC,EAPA,KASZC,EAAW,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGqBpC,EAAKkB,YAApCmB,EAHU,EAGVA,YAAaC,EAHH,EAGGA,IAAKC,EAHR,EAGQA,SAHR,SAIZjB,EAAYkB,IAAI,CACpBH,cACAI,KAAMV,EACNW,UAAWrD,IAASY,UAAU0C,WAAWC,kBACzCN,MACAC,aATgB,OAYlBP,EAAa,IACbZ,EAAMyB,QAAQC,eAAe,CAAEC,SAAU,WAbvB,2CAAH,sDAgBjB,OACE,qCACE,iCACGlB,GACCA,EAASmB,KAAI,SAACC,GAAD,OAAS,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OAE9C,sBAAMC,IAAKjC,OAGb,uBAAMkC,SAAUrB,EAAhB,UACE,cAAC,IAAD,CACEsB,GAAI,EACJC,MAAOzB,EACP0B,SAAU,SAACvB,GAAD,OAAOF,EAAaE,EAAEwB,OAAOF,QACvCG,YAAY,uBAGd,cAAC,IAAD,CAAQC,QAAQ,UAAUC,GAAI,EAAGC,KAAK,SAASC,UAAWhC,EAA1D,2CAQR,SAASmB,EAAYc,GAAQ,IAAD,EACmBA,EAAMb,QAA9BV,GADK,EAClBJ,YADkB,EACLI,MAAMH,EADD,EACCA,IAAKC,EADN,EACMA,SAE1B0B,EAAe3B,IAAQtC,EAAKkB,YAAYoB,IAAM,OAAS,WAE7D,OACE,mCACE,sBAAK4B,UAAS,kBAAaD,GAA3B,UACE,qBACEE,IACE5B,GAAY,0DAGhB,4BAAIE,SC/HZ,IAYe2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9503ec0d.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport { ThemeProvider, Button, Input } from \"theme-ui\";\nimport theme from \"@rebass/preset\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\n\nif (!firebase.apps.length) {\n  firebase.initializeApp({\n    apiKey: \"AIzaSyClCMTncHfSZERRPNULeGs2F8KSAkphI_Q\",\n    authDomain: \"ginder-app.firebaseapp.com\",\n    projectId: \"ginder-app\",\n    storageBucket: \"ginder-app.appspot.com\",\n    messagingSenderId: \"605363120970\",\n    appId: \"1:605363120970:web:72813cd0fe7ed18bb92fb3\",\n    measurementId: \"G-HFRG26XVBY\",\n  });\n}\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  const [user] = useAuthState(auth);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div\n        sx={{\n          maxWidth: 512,\n          mx: \"auto\",\n          px: 3,\n          py: 4,\n        }}\n      >\n        <header>\n          <h1>‡∏Å‡∏¥‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå Ginder üî•</h1>\n          <SignOut />\n        </header>\n        <section>{user ? <ChatRoom /> : <SignIn />}</section>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  };\n  return <button onClick={signInWithGoogle}>Sign in with Google</button>;\n}\n\nfunction SignOut() {\n  return (\n    auth.currentUser && <button onClick={() => auth.signOut()}>Sign Out</button>\n  );\n}\n\nfunction ChatRoom() {\n  const dummy = useRef();\n  const messagesRef = firestore.collection(\"messages\");\n  const query = messagesRef.orderBy(\"createdAt\").limit(100000);\n\n  const [messages] = useCollectionData(query, { idField: \"id\" });\n\n  const [formValue, setFormValue] = useState(\"\");\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { displayName, uid, photoURL } = auth.currentUser;\n    await messagesRef.add({\n      displayName,\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n    });\n\n    setFormValue(\"\");\n    dummy.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <>\n      <main>\n        {messages &&\n          messages.map((msg) => <ChatMessage key={msg.id} message={msg} />)}\n\n        <span ref={dummy}></span>\n      </main>\n\n      <form onSubmit={sendMessage}>\n        <Input\n          mb={3}\n          value={formValue}\n          onChange={(e) => setFormValue(e.target.value)}\n          placeholder=\"say something nice\"\n        />\n\n        <Button variant=\"primary\" mr={2} type=\"submit\" disabled={!formValue}>\n          üïäÔ∏è sent\n        </Button>\n      </form>\n    </>\n  );\n}\n\nfunction ChatMessage(props) {\n  const { displayName, text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? \"sent\" : \"received\";\n\n  return (\n    <>\n      <div className={`message ${messageClass}`}>\n        <img\n          src={\n            photoURL || \"https://api.adorable.io/avatars/23/abott@adorable.png\"\n          }\n        />\n        <p>{text}</p>\n      </div>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}